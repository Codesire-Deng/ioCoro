// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

#ifndef PROTOBUF_INCLUDED_payload_2eproto
#define PROTOBUF_INCLUDED_payload_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_payload_2eproto 

namespace protobuf_payload_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_payload_2eproto
namespace adi {
class PayLoad;
class PayLoadDefaultTypeInternal;
extern PayLoadDefaultTypeInternal _PayLoad_default_instance_;
class PayLoad_Pair;
class PayLoad_PairDefaultTypeInternal;
extern PayLoad_PairDefaultTypeInternal _PayLoad_Pair_default_instance_;
}  // namespace adi
namespace google {
namespace protobuf {
template<> ::adi::PayLoad* Arena::CreateMaybeMessage<::adi::PayLoad>(Arena*);
template<> ::adi::PayLoad_Pair* Arena::CreateMaybeMessage<::adi::PayLoad_Pair>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace adi {

enum PayLoad_Type {
  PayLoad_Type_START = 0,
  PayLoad_Type_GO = 1,
  PayLoad_Type_BACK = 2,
  PayLoad_Type_EMPTY = 3,
  PayLoad_Type_PayLoad_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PayLoad_Type_PayLoad_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PayLoad_Type_IsValid(int value);
const PayLoad_Type PayLoad_Type_Type_MIN = PayLoad_Type_START;
const PayLoad_Type PayLoad_Type_Type_MAX = PayLoad_Type_EMPTY;
const int PayLoad_Type_Type_ARRAYSIZE = PayLoad_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayLoad_Type_descriptor();
inline const ::std::string& PayLoad_Type_Name(PayLoad_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayLoad_Type_descriptor(), value);
}
inline bool PayLoad_Type_Parse(
    const ::std::string& name, PayLoad_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayLoad_Type>(
    PayLoad_Type_descriptor(), name, value);
}
// ===================================================================

class PayLoad_Pair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:adi.PayLoad.Pair) */ {
 public:
  PayLoad_Pair();
  virtual ~PayLoad_Pair();

  PayLoad_Pair(const PayLoad_Pair& from);

  inline PayLoad_Pair& operator=(const PayLoad_Pair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PayLoad_Pair(PayLoad_Pair&& from) noexcept
    : PayLoad_Pair() {
    *this = ::std::move(from);
  }

  inline PayLoad_Pair& operator=(PayLoad_Pair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayLoad_Pair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayLoad_Pair* internal_default_instance() {
    return reinterpret_cast<const PayLoad_Pair*>(
               &_PayLoad_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PayLoad_Pair* other);
  friend void swap(PayLoad_Pair& a, PayLoad_Pair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PayLoad_Pair* New() const final {
    return CreateMaybeMessage<PayLoad_Pair>(NULL);
  }

  PayLoad_Pair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PayLoad_Pair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PayLoad_Pair& from);
  void MergeFrom(const PayLoad_Pair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayLoad_Pair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string city = 1;
  void clear_city();
  static const int kCityFieldNumber = 1;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // int32 temperature = 2;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  ::google::protobuf::int32 temperature() const;
  void set_temperature(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:adi.PayLoad.Pair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::int32 temperature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_payload_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PayLoad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:adi.PayLoad) */ {
 public:
  PayLoad();
  virtual ~PayLoad();

  PayLoad(const PayLoad& from);

  inline PayLoad& operator=(const PayLoad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PayLoad(PayLoad&& from) noexcept
    : PayLoad() {
    *this = ::std::move(from);
  }

  inline PayLoad& operator=(PayLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayLoad* internal_default_instance() {
    return reinterpret_cast<const PayLoad*>(
               &_PayLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PayLoad* other);
  friend void swap(PayLoad& a, PayLoad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PayLoad* New() const final {
    return CreateMaybeMessage<PayLoad>(NULL);
  }

  PayLoad* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PayLoad>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PayLoad& from);
  void MergeFrom(const PayLoad& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayLoad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PayLoad_Pair Pair;

  typedef PayLoad_Type Type;
  static const Type START =
    PayLoad_Type_START;
  static const Type GO =
    PayLoad_Type_GO;
  static const Type BACK =
    PayLoad_Type_BACK;
  static const Type EMPTY =
    PayLoad_Type_EMPTY;
  static inline bool Type_IsValid(int value) {
    return PayLoad_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PayLoad_Type_Type_MIN;
  static const Type Type_MAX =
    PayLoad_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PayLoad_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PayLoad_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PayLoad_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PayLoad_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .adi.PayLoad.Pair pair = 4;
  int pair_size() const;
  void clear_pair();
  static const int kPairFieldNumber = 4;
  ::adi::PayLoad_Pair* mutable_pair(int index);
  ::google::protobuf::RepeatedPtrField< ::adi::PayLoad_Pair >*
      mutable_pair();
  const ::adi::PayLoad_Pair& pair(int index) const;
  ::adi::PayLoad_Pair* add_pair();
  const ::google::protobuf::RepeatedPtrField< ::adi::PayLoad_Pair >&
      pair() const;

  // string From = 2;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string Request = 3;
  void clear_request();
  static const int kRequestFieldNumber = 3;
  const ::std::string& request() const;
  void set_request(const ::std::string& value);
  #if LANG_CXX11
  void set_request(::std::string&& value);
  #endif
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  ::std::string* mutable_request();
  ::std::string* release_request();
  void set_allocated_request(::std::string* request);

  // .adi.PayLoad.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::adi::PayLoad_Type type() const;
  void set_type(::adi::PayLoad_Type value);

  // @@protoc_insertion_point(class_scope:adi.PayLoad)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::adi::PayLoad_Pair > pair_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr request_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_payload_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PayLoad_Pair

// string city = 1;
inline void PayLoad_Pair::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayLoad_Pair::city() const {
  // @@protoc_insertion_point(field_get:adi.PayLoad.Pair.city)
  return city_.GetNoArena();
}
inline void PayLoad_Pair::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:adi.PayLoad.Pair.city)
}
#if LANG_CXX11
inline void PayLoad_Pair::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:adi.PayLoad.Pair.city)
}
#endif
inline void PayLoad_Pair::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:adi.PayLoad.Pair.city)
}
inline void PayLoad_Pair::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:adi.PayLoad.Pair.city)
}
inline ::std::string* PayLoad_Pair::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:adi.PayLoad.Pair.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayLoad_Pair::release_city() {
  // @@protoc_insertion_point(field_release:adi.PayLoad.Pair.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayLoad_Pair::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:adi.PayLoad.Pair.city)
}

// int32 temperature = 2;
inline void PayLoad_Pair::clear_temperature() {
  temperature_ = 0;
}
inline ::google::protobuf::int32 PayLoad_Pair::temperature() const {
  // @@protoc_insertion_point(field_get:adi.PayLoad.Pair.temperature)
  return temperature_;
}
inline void PayLoad_Pair::set_temperature(::google::protobuf::int32 value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:adi.PayLoad.Pair.temperature)
}

// -------------------------------------------------------------------

// PayLoad

// .adi.PayLoad.Type type = 1;
inline void PayLoad::clear_type() {
  type_ = 0;
}
inline ::adi::PayLoad_Type PayLoad::type() const {
  // @@protoc_insertion_point(field_get:adi.PayLoad.type)
  return static_cast< ::adi::PayLoad_Type >(type_);
}
inline void PayLoad::set_type(::adi::PayLoad_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:adi.PayLoad.type)
}

// string From = 2;
inline void PayLoad::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayLoad::from() const {
  // @@protoc_insertion_point(field_get:adi.PayLoad.From)
  return from_.GetNoArena();
}
inline void PayLoad::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:adi.PayLoad.From)
}
#if LANG_CXX11
inline void PayLoad::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:adi.PayLoad.From)
}
#endif
inline void PayLoad::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:adi.PayLoad.From)
}
inline void PayLoad::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:adi.PayLoad.From)
}
inline ::std::string* PayLoad::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:adi.PayLoad.From)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayLoad::release_from() {
  // @@protoc_insertion_point(field_release:adi.PayLoad.From)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayLoad::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:adi.PayLoad.From)
}

// string Request = 3;
inline void PayLoad::clear_request() {
  request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayLoad::request() const {
  // @@protoc_insertion_point(field_get:adi.PayLoad.Request)
  return request_.GetNoArena();
}
inline void PayLoad::set_request(const ::std::string& value) {
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:adi.PayLoad.Request)
}
#if LANG_CXX11
inline void PayLoad::set_request(::std::string&& value) {
  
  request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:adi.PayLoad.Request)
}
#endif
inline void PayLoad::set_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:adi.PayLoad.Request)
}
inline void PayLoad::set_request(const char* value, size_t size) {
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:adi.PayLoad.Request)
}
inline ::std::string* PayLoad::mutable_request() {
  
  // @@protoc_insertion_point(field_mutable:adi.PayLoad.Request)
  return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayLoad::release_request() {
  // @@protoc_insertion_point(field_release:adi.PayLoad.Request)
  
  return request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayLoad::set_allocated_request(::std::string* request) {
  if (request != NULL) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:adi.PayLoad.Request)
}

// repeated .adi.PayLoad.Pair pair = 4;
inline int PayLoad::pair_size() const {
  return pair_.size();
}
inline void PayLoad::clear_pair() {
  pair_.Clear();
}
inline ::adi::PayLoad_Pair* PayLoad::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:adi.PayLoad.pair)
  return pair_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::adi::PayLoad_Pair >*
PayLoad::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:adi.PayLoad.pair)
  return &pair_;
}
inline const ::adi::PayLoad_Pair& PayLoad::pair(int index) const {
  // @@protoc_insertion_point(field_get:adi.PayLoad.pair)
  return pair_.Get(index);
}
inline ::adi::PayLoad_Pair* PayLoad::add_pair() {
  // @@protoc_insertion_point(field_add:adi.PayLoad.pair)
  return pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::adi::PayLoad_Pair >&
PayLoad::pair() const {
  // @@protoc_insertion_point(field_list:adi.PayLoad.pair)
  return pair_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace adi

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::adi::PayLoad_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::adi::PayLoad_Type>() {
  return ::adi::PayLoad_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_payload_2eproto
